[{"/Users/reid/Development/code/Mod4/phase-4-project/xmas-e_calendar-front_end/src/App.js":"1","/Users/reid/Development/code/Mod4/phase-4-project/xmas-e_calendar-front_end/src/Calendar.js":"2","/Users/reid/Development/code/Mod4/phase-4-project/xmas-e_calendar-front_end/src/CalendarContainer.js":"3"},{"size":6511,"mtime":1606947157554,"results":"4","hashOfConfig":"5"},{"size":717,"mtime":1606945666771,"results":"6","hashOfConfig":"5"},{"size":10783,"mtime":1606945371316,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"k9m5tj",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/reid/Development/code/Mod4/phase-4-project/xmas-e_calendar-front_end/src/App.js",["15"],"import './App.css';\nimport { BrowserRouter as Router, Route , Switch, withRouter} from 'react-router-dom'\nimport React from 'react'\nimport NavBar from \"./Navbar\"\nimport CalendarContainer from './CalendarContainer.js'\nimport Calendar from './Calendar.js'\nimport Signup from './Signup.js'\nimport Login from './LogIn.js'\nimport Home from './Home'\nimport CalendarForm from './CalendarForm.js' \n\nclass App extends React.Component {\n  state = {\n    user: null \n  }\n\n//   componentDidMount=() => {\n//     const token = localStorage.getItem('token');\n//     if (token ){\n//       let id = this.state.user.id\n//     fetch(`http://localhost:3000/users/${id}`, {\n//       method: 'GET',\n//       headers: {\n//         Authorization: `Bearer ${token}`\n//       }\n//     }) \n//     .then(r => r.json())\n//     .then(user => {\n//       this.setState({ calendars: user.calendar })\n    \n//     })\n//   } \n// }\n\n\n\n  calendarForm = (newCalendar) => {\n   let id = this.state.user.id\n   const token = localStorage.getItem('token');\n    console.log(this.state)\n    fetch('http://localhost:3000/calendars', {\n      method: 'POST',\n      headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accepts\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`\n\n      },\n      body: JSON.stringify({\n        user_id: id, \n        name: newCalendar.name})\n    })\n    .then(response => response.json())\n    .then(newCalendarObj => {\n      let newUser = {...this.state.user} \n      let newCalendars= newUser.calendars.concat(newCalendarObj)\n      newUser.calendars = newCalendars\n      this.setState({user: newUser})\n      this.renderCalendarDays(newCalendarObj, newUser)\n      //  pass in new user array as an argument, find index from this array and setstate with new array \n     \n\n      // this.setState({\n      //   calendars: this.state.calendars.concat(newCalendarObj)\n      // })\n    })\n  }\n  \n  renderCalendarDays = (calObj, userObj) => {\n    const token = localStorage.getItem('token');\n    let date = 0\n    let newArray = {...userObj}\n    let index = userObj.calendars.findIndex(calendar => calendar.id === calObj.id)\n    let dayArray = []\n    console.log(newArray)\n    for (let i = 0; i < 24; i++) {\n      date ++\n      fetch('http://localhost:3000/days', {\n        method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer ${token}`\n            },\n            body: JSON.stringify({\n              date: date,\n              calendar_id: calObj.id\n          })\n        })\n        .then(response => response.json())\n        .then(newDayObj=> {\n          dayArray.push(newDayObj)\n      })\n    }\n    newArray.calendars[index].days = dayArray\n    this.setState({user: newArray})\n  }\n    \n    signupSubmitHandler = (newUser) => {\n      console.log(newUser)\n    fetch('http://localhost:3000/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n \n      },\n      body: JSON.stringify(newUser)\n      })\n      .then(r => r.json())\n      .then(newUserObj => {\n        this.setState({user:newUserObj.user})\n        localStorage.setItem(\"token\", newUserObj.jwt)\n        console.log(newUserObj)\n      });\n  }\n\n  loginHandler = (userLogin) => {\n  fetch('http://localhost:3000/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    \n    },\n    body: JSON.stringify(userLogin)\n    })\n    .then(r => r.json())\n    .then(loggedInUser => {\n      localStorage.setItem(\"token\", loggedInUser.jwt)\n      this.setState({user:loggedInUser.user}\n        , () => this.props.history.push('/calendars')\n        )\n        console.log(loggedInUser)\n    })\n}\n\n    createDayData = (id, dayState) => {\n      const token = localStorage.getItem('token');\n      fetch(`http://localhost:3000/days/${id}`, {\n          method: \"PATCH\",\n          headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accepts\": \"application/json\",\n              \"Authorization\": `Bearer ${token}`\n          },\n          body: JSON.stringify(dayState)\n      })\n          .then(response => response.json())\n          .then((updatedDayObj) => {\n            let newUser = {...this.state.user}\n            let calendarIndex= newUser.calendars.findIndex(calendar=> calendar.id === dayState.calendar_id)\n            // debugger\n            let dayIndex = newUser.calendars[calendarIndex].days.findIndex(day=> day.id === id )\n             newUser.calendars[calendarIndex].days[dayIndex] = updatedDayObj\n             this.setState({user:newUser})\n\n          // this.props.submitHandler(this.state);\n      })\n      \n    }\n    deleteDayData = (id, dayState)=> {\n      const token = localStorage.getItem('token');\n      const data = {\n        content: \"\", \n        image_video: \"\", \n        calendar_id: this.props.calendarId, \n        date: this.props.date\n      }\n      fetch(`http://localhost:3000/days/${id}`, {\n          method: \"PATCH\",\n          headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accepts\": \"application/json\",\n              \"Authorization\": `Bearer ${token}`\n          },\n          body: JSON.stringify(data)\n      })\n    }\n    \n    renderCalendars = () => {\n      console.log(\"USER STATE\", this.state.user)\n\n      return <CalendarContainer create= {this.createDayData} delete={ this.deleteDayData} user= {this.state.user}/>\n\n    }\n    \n  renderCalendar = (routerProps) => {\n    console.log(routerProps)\n    let id= parseInt(routerProps.match.params.id)\n    let foundCalendar =this.state.user.calendars.find((calendar)=> calendar.id === id)\n    console.log(id)\n    return  <Calendar calendar = {foundCalendar} create={this.createDayData} delete ={this.deleteDayData}/>\n  }\n  render(){\n    console.log(this.state)\n    return (\n      <Switch>\n        <div>\n          <NavBar /> \n          <Route exact path=\"/signup\"render={() => <Signup submitHandler = {this.signupSubmitHandler}/>}/>\n          <Route exact path=\"/login\" render={() => <Login loginHandler = {this.loginHandler}/>}/>\n          <Route exact path=\"/\" component={Home}/>\n          <Route path=\"/calendars/:id\" render={this.renderCalendar}/>\n          <Route exact path=\"/calendars\" render={this.renderCalendars}/>\n          <Route exact path =\"/calendar-form\" render={()=> <CalendarForm user= {this.state.user} calendarForm={this.calendarForm} />}/>\n        </div>\n      </Switch>\n    );\n  }\n  }\n\n  export default withRouter(App)\n\n","/Users/reid/Development/code/Mod4/phase-4-project/xmas-e_calendar-front_end/src/Calendar.js",[],"/Users/reid/Development/code/Mod4/phase-4-project/xmas-e_calendar-front_end/src/CalendarContainer.js",["16","17"],{"ruleId":"18","severity":1,"message":"19","line":2,"column":27,"nodeType":"20","messageId":"21","endLine":2,"endColumn":33},{"ruleId":"18","severity":1,"message":"22","line":2,"column":35,"nodeType":"20","messageId":"21","endLine":2,"endColumn":39},{"ruleId":"18","severity":1,"message":"23","line":2,"column":61,"nodeType":"20","messageId":"21","endLine":2,"endColumn":67},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Switch' is defined but never used."]